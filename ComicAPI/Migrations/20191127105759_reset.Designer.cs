// <auto-generated />
using System;
using ComicAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ComicAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20191127105759_reset")]
    partial class reset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ComicAPI.Genre", b =>
                {
                    b.Property<int>("GenreID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Genre_name");

                    b.HasKey("GenreID");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            GenreID = 1,
                            Genre_name = "Trinh Thám"
                        },
                        new
                        {
                            GenreID = 2,
                            Genre_name = "Ngôn Tình"
                        },
                        new
                        {
                            GenreID = 3,
                            Genre_name = "Viễn Tưởng"
                        },
                        new
                        {
                            GenreID = 4,
                            Genre_name = "Xuyên Không"
                        },
                        new
                        {
                            GenreID = 5,
                            Genre_name = "Dị Giới"
                        });
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.Chapter", b =>
                {
                    b.Property<int>("ChapterID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComicID");

                    b.Property<string>("Content");

                    b.Property<int>("STT");

                    b.Property<string>("Title");

                    b.HasKey("ChapterID");

                    b.HasIndex("ComicID");

                    b.ToTable("Chapter");

                    b.HasData(
                        new
                        {
                            ChapterID = 1,
                            ComicID = 1,
                            Content = "",
                            STT = 1,
                            Title = "Đỗ Mạnh Cầm"
                        },
                        new
                        {
                            ChapterID = 2,
                            ComicID = 1,
                            Content = "",
                            STT = 2,
                            Title = "Khổ luyện"
                        },
                        new
                        {
                            ChapterID = 3,
                            ComicID = 2,
                            Content = "",
                            STT = 1,
                            Title = "Bộ mặt thật của 3 bà chị"
                        },
                        new
                        {
                            ChapterID = 4,
                            ComicID = 2,
                            Content = "",
                            STT = 2,
                            Title = "Xui Kiếp"
                        });
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.Comic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author");

                    b.Property<int>("Chapter_long");

                    b.Property<string>("Description");

                    b.Property<int>("GenreID");

                    b.Property<string>("Image");

                    b.Property<int>("Likes");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.Property<DateTime>("Update_time");

                    b.Property<int>("Views");

                    b.HasKey("ID");

                    b.ToTable("Comic");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Author = "Đỗ Cầm",
                            Chapter_long = 0,
                            Description = " Sẽ thế nào khi bạn mang trong người song tu thần kinh? Sở hữu khả năng xuyên qua 10 thế giới? Đào hoa vận không thua gì Rito (To love ru)? Lập 1 giàn harem, thủy tinh cung khủng nhất vũ trụ về khoe cho bọn bạn gato chơi.Đỗ Cầm có tất cả nhưng lại thừa 1 điều..... thừa bóng ma tâm lý về phụ nữ.Hãy đón xem công cuộc bị chinh phục của anh chàng đen đủi hay may mắn này nhé",
                            GenreID = 1,
                            Image = "https://sstruyen.com/assets/img/story//cong-cuoc-bi-em-gai-chinh-phuc.jpg",
                            Likes = 100,
                            Name = "Công Cuộc Bị 999 Em Gái Chinh Phục",
                            Status = 0,
                            Update_time = new DateTime(2019, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Views = 100
                        },
                        new
                        {
                            ID = 2,
                            Author = "Phong Tử Tam Tam",
                            Chapter_long = 0,
                            Description = "Cố Minh Sâm giúp Ôn Vãn, lại không ngờ con bé kia lấy oán trả ơn.Mà Ôn Vãn không thẹn với lòng, dám khẳng định: Cô đối với Cố Minh Sâm, chỉ còn kém việc, dâng cái mạng nhỏ này cho anh ta. Kết quả chỉ đổi lấy tờ giấy thỏa thuận li hôn. Quả nhiên, thế giới này vô cùng bất công, người tốt lại chẳng được đền đáp.Dùng một câu để chốt văn án: Kết thúc đoạn hôn nhân hữu danh vô thực  đáng thất vọng, vận đào hoa của Ôn Vãn bỗng nhiên khởi sắc.",
                            GenreID = 4,
                            Image = "https://sstruyen.com/assets/img/story//cau-chuyen-ho-o.jpg",
                            Likes = 100,
                            Name = "Câu Chuyện Hồ Đồ",
                            Status = 0,
                            Update_time = new DateTime(2019, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Views = 100
                        });
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.ComicGenre", b =>
                {
                    b.Property<int>("ComicID");

                    b.Property<int>("GenreID");

                    b.HasKey("ComicID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("ComicGenre");
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ComicID");

                    b.Property<DateTime>("CommentTime");

                    b.Property<string>("Content");

                    b.Property<int?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ComicID");

                    b.HasIndex("UserID");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CommentTime = new DateTime(2019, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "OK"
                        },
                        new
                        {
                            ID = 2,
                            CommentTime = new DateTime(2019, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "OK"
                        },
                        new
                        {
                            ID = 3,
                            CommentTime = new DateTime(2019, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Content = "OK"
                        });
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.Like", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComicID");

                    b.Property<int>("UserLikeID");

                    b.Property<bool>("check");

                    b.HasKey("ID");

                    b.HasIndex("UserLikeID");

                    b.ToTable("Like");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ComicID = 1,
                            UserLikeID = 1,
                            check = true
                        },
                        new
                        {
                            ID = 2,
                            ComicID = 1,
                            UserLikeID = 3,
                            check = true
                        });
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PostContent");

                    b.Property<DateTime>("PostTime");

                    b.Property<string>("Title");

                    b.Property<int>("UserPostID");

                    b.HasKey("PostID");

                    b.HasIndex("UserPostID");

                    b.ToTable("Post");

                    b.HasData(
                        new
                        {
                            PostID = 1,
                            PostContent = "Mn tim giup minh cuon truyen",
                            PostTime = new DateTime(2019, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Help me",
                            UserPostID = 1
                        },
                        new
                        {
                            PostID = 2,
                            PostContent = "Mn tim giup minh cuon truyen",
                            PostTime = new DateTime(2019, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Help me",
                            UserPostID = 2
                        });
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Image");

                    b.Property<string>("Password");

                    b.Property<int>("Role");

                    b.Property<string>("Username");

                    b.HasKey("ID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Email = "user@gmail.com",
                            Image = "https://middle.pngfans.com/20190505/lx/avatar-user-png-avatar-computer-icons-clipart-c26add6546fc41bb.jpg",
                            Password = "12345",
                            Role = 0,
                            Username = "ThuNguyen"
                        },
                        new
                        {
                            ID = 2,
                            Email = "user@gmail.com",
                            Image = "https://middle.pngfans.com/20190505/lx/avatar-user-png-avatar-computer-icons-clipart-c26add6546fc41bb.jpg",
                            Password = "12345",
                            Role = 0,
                            Username = "NhutThuy"
                        },
                        new
                        {
                            ID = 3,
                            Email = "user@gmail.com",
                            Image = "https://middle.pngfans.com/20190505/lx/avatar-user-png-avatar-computer-icons-clipart-c26add6546fc41bb.jpg",
                            Password = "12345",
                            Role = 0,
                            Username = "TuongVi"
                        },
                        new
                        {
                            ID = 4,
                            Email = "admin@gmail.com",
                            Image = "https://cactusthemes.com/blog/wp-content/uploads/2018/01/tt_avatar_small.jpg",
                            Password = "12345",
                            Role = 1,
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.Chapter", b =>
                {
                    b.HasOne("ComicAPI.Models.Entities.Comic", "Comic")
                        .WithMany("Chapters")
                        .HasForeignKey("ComicID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.ComicGenre", b =>
                {
                    b.HasOne("ComicAPI.Models.Entities.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ComicAPI.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.Comment", b =>
                {
                    b.HasOne("ComicAPI.Models.Entities.Comic", "Comic")
                        .WithMany("Comments")
                        .HasForeignKey("ComicID");

                    b.HasOne("ComicAPI.Models.Entities.User", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.Like", b =>
                {
                    b.HasOne("ComicAPI.Models.Entities.User", "UserLike")
                        .WithMany()
                        .HasForeignKey("UserLikeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ComicAPI.Models.Entities.Post", b =>
                {
                    b.HasOne("ComicAPI.Models.Entities.User", "UserPost")
                        .WithMany()
                        .HasForeignKey("UserPostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
